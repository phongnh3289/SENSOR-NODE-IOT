<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Targets\STM32F4_DISCOVERY\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Targets\STM32F4_DISCOVERY\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Apr 25 18:13:32 2019
<BR><P>
<H3>Maximum Stack Usage =        440 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
GSM_Update_Thread &rArr; GSM_Update &rArr; ParseReceived &rArr; ParseCIPGSMLOC &rArr; ParseFloatNumber &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[71]">GSM_SMS_Thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">GSM_SMS_Thread</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[64]">ADC_DMAConvCplt</a> from stm32f4xx_hal_adc.o(.text) referenced from stm32f4xx_hal_adc.o(.text)
 <LI><a href="#[66]">ADC_DMAError</a> from stm32f4xx_hal_adc.o(.text) referenced from stm32f4xx_hal_adc.o(.text)
 <LI><a href="#[65]">ADC_DMAHalfConvCplt</a> from stm32f4xx_hal_adc.o(.text) referenced from stm32f4xx_hal_adc.o(.text)
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">ADC_MultiModeDMAConvCplt</a> from stm32f4xx_hal_adc_ex.o(.text) referenced from stm32f4xx_hal_adc_ex.o(.text)
 <LI><a href="#[69]">ADC_MultiModeDMAError</a> from stm32f4xx_hal_adc_ex.o(.text) referenced from stm32f4xx_hal_adc_ex.o(.text)
 <LI><a href="#[68]">ADC_MultiModeDMAHalfConvCplt</a> from stm32f4xx_hal_adc_ex.o(.text) referenced from stm32f4xx_hal_adc_ex.o(.text)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32fxxx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream5_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream6_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream7_IRQHandler</a> from tm_stm32_dma.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32fxxx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[197]">GSM_Callback</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[6a]">GSM_CallbackDefault</a> from gsm.o(.text) referenced from gsm.o(.text)
 <LI><a href="#[70]">GSM_Main_Thread</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[71]">GSM_SMS_Thread</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[6f]">GSM_Update_Thread</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32fxxx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32fxxx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32fxxx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from port_cm4.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from tm_stm32_rtc.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from tm_stm32_rtc.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from port_cm4.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32fxxx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from tm_stm32_usart.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from tm_stm32_usart.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">UART_DMAError</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[62]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[63]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[5f]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[60]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[30]">USART1_IRQHandler</a> from tm_stm32_usart.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from tm_stm32_usart.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from tm_stm32_usart.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">USART6_IRQHandler</a> from tm_stm32_usart.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32fxxx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[6e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[6d]">fputc</a> from main.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[5c]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6b]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[6c]">prvTaskExitError</a> from port_cm4.o(.text) referenced from port_cm4.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[296]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[72]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[281]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[297]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[298]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[299]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[29a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[29b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port_cm4.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[248]"></a>__asm___10_port_cm4_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[247]"></a>__asm___10_port_cm4_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port_cm4.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24a]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>HAL_MspInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[75]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[79]"></a>HAL_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[7f]"></a>HAL_DeInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[29c]"></a>HAL_SuspendTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>HAL_ResumeTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>HAL_GetHalVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>HAL_DisableCompensationCell</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[78]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_EnableAlarm
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Interrupts
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_EnableInterrupts
</UL>

<P><STRONG><a name="[7e]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_EnableAlarm
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Interrupts
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_EnableInterrupts
</UL>

<P><STRONG><a name="[103]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_DisableInterrupts
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_EnableInterrupts
</UL>

<P><STRONG><a name="[2a9]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2aa]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>HAL_NVIC_GetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_NVIC_GetPriority</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_ClearAllFlags
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
</UL>

<P><STRONG><a name="[2ae]"></a>HAL_NVIC_GetActive</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[87]"></a>HAL_DMA_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_Init
</UL>

<P><STRONG><a name="[89]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_DeInit
</UL>

<P><STRONG><a name="[8a]"></a>HAL_DMA_Start</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_Start
</UL>

<P><STRONG><a name="[8c]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStart_DMA
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[8d]"></a>HAL_DMA_Abort</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStop_DMA
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
</UL>

<P><STRONG><a name="[8e]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 530 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>HAL_DMA_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2b3]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 326 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>HAL_GPIO_LockPin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[2b8]"></a>HAL_PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Init
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_PWR_DisableBkUpAccess</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>HAL_PWR_ConfigPVD</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>HAL_PWR_EnablePVD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>HAL_PWR_EnableWakeUpPin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>HAL_PWR_DisableWakeUpPin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>HAL_PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>HAL_PWR_PVDCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVD_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>HAL_PWR_PVD_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVDCallback
</UL>

<P><STRONG><a name="[2c2]"></a>HAL_PWR_EnableSleepOnExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>HAL_PWR_DisableSleepOnExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>HAL_PWR_EnableSEVOnPend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>HAL_PWR_DisableSEVOnPend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1028 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Config
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RCC_InitSystem
</UL>

<P><STRONG><a name="[94]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 680 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RCC_InitSystem
</UL>

<P><STRONG><a name="[95]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>HAL_RCC_DisableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[76]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[97]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[98]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2c8]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>

<P><STRONG><a name="[9d]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_UART_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_HalfDuplex_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9f]"></a>HAL_LIN_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a0]"></a>HAL_MultiProcessor_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a2]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[a1]"></a>HAL_UART_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[a4]"></a>HAL_UART_Transmit</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[a5]"></a>HAL_UART_Receive</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[a7]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[a8]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[a9]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[aa]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[ab]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[ac]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_UART_DMAPause</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>HAL_UART_DMAResume</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[b0]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[2ce]"></a>HAL_LIN_SendBreak</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>HAL_MultiProcessor_EnterMuteMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>HAL_MultiProcessor_ExitMuteMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>HAL_HalfDuplex_EnableTransmitter</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>HAL_HalfDuplex_EnableReceiver</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>HAL_UART_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>HAL_UART_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateRefClock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetRefClock
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateCoarseCalib
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetCoarseCalib
</UL>

<P><STRONG><a name="[b4]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_RTC_Init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_SetDateTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_RTC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
</UL>

<P><STRONG><a name="[b5]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetSynchroShift
</UL>

<P><STRONG><a name="[b6]"></a>HAL_RTC_DeInit</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspDeInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[ba]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_GetTimeStamp
</UL>

<P><STRONG><a name="[b9]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
</UL>

<P><STRONG><a name="[b8]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_SetDateTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_GetDateTime
</UL>

<P><STRONG><a name="[bc]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_SetDateTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_GetDateTime
</UL>

<P><STRONG><a name="[be]"></a>HAL_RTC_SetAlarm</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 554 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_EnableAlarm
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_DisableAlarm
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RTC_GetAlarm</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RTC_PollForAlarmAEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_RTC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>HAL_RTCEx_SetTimeStamp</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>HAL_RTCEx_SetTimeStamp_IT</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>HAL_RTCEx_DeactivateTimeStamp</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>HAL_RTCEx_GetTimeStamp</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[2d9]"></a>HAL_RTCEx_SetTamper</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>HAL_RTCEx_SetTamper_IT</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>HAL_RTCEx_DeactivateTamper</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>HAL_RTCEx_Tamper2EventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TamperTimeStampIRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>HAL_RTCEx_Tamper1EventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TamperTimeStampIRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RTCEx_TimeStampEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TamperTimeStampIRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RTCEx_TamperTimeStampIRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TimeStampEventCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_Tamper1EventCallback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_Tamper2EventCallback
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RTCEx_PollForTimeStampEvent</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RTCEx_PollForTamper1Event</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RTCEx_PollForTamper2Event</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RTCEx_SetWakeUpTimer</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[cf]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Interrupts
</UL>

<P><STRONG><a name="[d0]"></a>HAL_RTCEx_DeactivateWakeUpTimer</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2dc]"></a>HAL_RTCEx_GetWakeUpTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>HAL_RTCEx_WakeUpTimerEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RTCEx_WakeUpTimerIRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>

<P><STRONG><a name="[d3]"></a>HAL_RTCEx_PollForWakeUpTimerEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[11f]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_RTCEx_SetCoarseCalib</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[d5]"></a>HAL_RTCEx_DeactivateCoarseCalib</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[d6]"></a>HAL_RTCEx_SetSmoothCalib</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[d7]"></a>HAL_RTCEx_SetSynchroShift</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2dd]"></a>HAL_RTCEx_SetCalibrationOutPut</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>HAL_RTCEx_DeactivateCalibrationOutPut</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>HAL_RTCEx_SetRefClock</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[d9]"></a>HAL_RTCEx_DeactivateRefClock</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[2df]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>HAL_RTCEx_DisableBypassShadow</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_RTCEx_PollForAlarmBEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2e1]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Config
</UL>

<P><STRONG><a name="[2e2]"></a>HAL_RCCEx_GetPeriphCLKConfig</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_InitADC
</UL>

<P><STRONG><a name="[e0]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[df]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>

<P><STRONG><a name="[157]"></a>HAL_ADC_Start</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Read
</UL>

<P><STRONG><a name="[2e3]"></a>HAL_ADC_Stop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Read
</UL>

<P><STRONG><a name="[e2]"></a>HAL_ADC_PollForEvent</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2e4]"></a>HAL_ADC_Start_IT</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>HAL_ADC_Stop_IT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiModeDMAError
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[e6]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiModeDMAConvCplt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[e3]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
</UL>

<P><STRONG><a name="[e8]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiModeDMAHalfConvCplt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[e9]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[ea]"></a>HAL_ADC_Stop_DMA</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[159]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Read
</UL>

<P><STRONG><a name="[156]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 416 bytes, Stack size 12 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Read
</UL>

<P><STRONG><a name="[2e6]"></a>HAL_ADC_AnalogWDGConfig</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>HAL_ADC_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Read
</UL>

<P><STRONG><a name="[2e7]"></a>HAL_ADC_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>HAL_ADCEx_InjectedStart</STRONG> (Thumb, 230 bytes, Stack size 12 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>HAL_ADCEx_InjectedStart_IT</STRONG> (Thumb, 258 bytes, Stack size 12 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>HAL_ADCEx_InjectedStop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>HAL_ADCEx_InjectedPollForConversion</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2eb]"></a>HAL_ADCEx_InjectedStop_IT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>HAL_ADCEx_InjectedGetValue</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>HAL_ADCEx_MultiModeStart_DMA</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[ed]"></a>HAL_ADCEx_MultiModeStop_DMA</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[2ed]"></a>HAL_ADCEx_MultiModeGetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[2ee]"></a>HAL_ADCEx_InjectedConfigChannel</STRONG> (Thumb, 552 bytes, Stack size 8 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>HAL_ADCEx_MultiModeConfigChannel</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>TM_BUFFER_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tm_stm32_buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f0]"></a>TM_BUFFER_Free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tm_stm32_buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[f7]"></a>TM_BUFFER_Write</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tm_stm32_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_BUFFER_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_InsertToBuffer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_WriteString
</UL>

<P><STRONG><a name="[fa]"></a>TM_BUFFER_Read</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, tm_stm32_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_BUFFER_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_Getc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_ReadString
</UL>

<P><STRONG><a name="[f9]"></a>TM_BUFFER_GetFree</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, tm_stm32_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_BUFFER_GetFree
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_BufferFull
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_ReadString
</UL>

<P><STRONG><a name="[f3]"></a>TM_BUFFER_GetFull</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, tm_stm32_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_BUFFER_GetFull
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_BufferCount
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_BufferEmpty
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_ReadString
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_Find
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_FindElement
</UL>

<P><STRONG><a name="[13d]"></a>TM_BUFFER_Reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tm_stm32_buffer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_ClearBuffer
</UL>

<P><STRONG><a name="[f2]"></a>TM_BUFFER_FindElement</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tm_stm32_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TM_BUFFER_FindElement &rArr; TM_BUFFER_GetFull
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_GetFull
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_FindCharacter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_ReadString
</UL>

<P><STRONG><a name="[f4]"></a>TM_BUFFER_Find</STRONG> (Thumb, 160 bytes, Stack size 36 bytes, tm_stm32_buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_GetFull
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_FindString
</UL>

<P><STRONG><a name="[f5]"></a>TM_BUFFER_WriteString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tm_stm32_buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_Write
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[f8]"></a>TM_BUFFER_ReadString</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, tm_stm32_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TM_BUFFER_ReadString &rArr; TM_BUFFER_FindElement &rArr; TM_BUFFER_GetFull
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_FindElement
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_GetFull
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_GetFree
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_Gets
</UL>

<P><STRONG><a name="[2f0]"></a>TM_BUFFER_CheckElement</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tm_stm32_buffer.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>TM_DELAY_Init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tm_stm32_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Init
</UL>

<P><STRONG><a name="[fb]"></a>TM_DELAY_TimerCreate</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tm_stm32_delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[fc]"></a>TM_DELAY_TimerDelete</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tm_stm32_delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[2f1]"></a>TM_DELAY_TimerStop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tm_stm32_delay.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>TM_DELAY_TimerStart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tm_stm32_delay.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>TM_DELAY_TimerReset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tm_stm32_delay.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>TM_DELAY_TimerAutoReloadCommand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tm_stm32_delay.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>TM_DELAY_TimerAutoReloadValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tm_stm32_delay.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>HAL_IncTick</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, tm_stm32_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_IncTick &rArr; TM_DELAY_1msHandler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DELAY_1msHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[81]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tm_stm32_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_PollForAlarmAEvent
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedPollForConversion
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForEvent
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PollForAlarmBEvent
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetSynchroShift
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetSmoothCalib
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PollForWakeUpTimerEvent
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PollForTamper2Event
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PollForTamper1Event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PollForTimeStampEvent
</UL>

<P><STRONG><a name="[ff]"></a>HAL_Delay</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, tm_stm32_delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[101]"></a>TM_DMA_ClearFlag</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_DisableInterrupts
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_EnableInterrupts
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_ClearFlags
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>

<P><STRONG><a name="[100]"></a>TM_DMA_ClearFlags</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_ClearFlag
</UL>

<P><STRONG><a name="[109]"></a>TM_DMA_GetFlags</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_DMA_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>

<P><STRONG><a name="[102]"></a>TM_DMA_EnableInterrupts</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tm_stm32_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_ClearFlag
</UL>

<P><STRONG><a name="[104]"></a>TM_DMA_DisableInterrupts</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tm_stm32_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_ClearFlag
</UL>

<P><STRONG><a name="[105]"></a>TM_DMA_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tm_stm32_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[106]"></a>TM_DMA_DeInit</STRONG> (Thumb, 18 bytes, Stack size 96 bytes, tm_stm32_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[107]"></a>TM_DMA_Start</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tm_stm32_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[10a]"></a>TM_DMA_TransferCompleteHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>

<P><STRONG><a name="[10b]"></a>TM_DMA_HalfTransferCompleteHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>

<P><STRONG><a name="[10c]"></a>TM_DMA_TransferErrorHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>

<P><STRONG><a name="[10d]"></a>TM_DMA_DirectModeErrorHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>

<P><STRONG><a name="[10e]"></a>TM_DMA_FIFOErrorHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream7_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream4_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream5_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_INT_ProcessInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>TM_GPIO_GetPortSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tm_stm32_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_GetFreePins
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_GetUsedPins
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_DisableClock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_DeInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_EnableClock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_Init
</UL>

<P><STRONG><a name="[10f]"></a>TM_GPIO_INT_Init</STRONG> (Thumb, 170 bytes, Stack size 28 bytes, tm_stm32_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_GetPortSource
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_InitAlternate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_Init
</UL>

<P><STRONG><a name="[111]"></a>TM_GPIO_INT_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, tm_stm32_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TM_GPIO_INT_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_GetPortSource
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_InitAlternate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_Init
</UL>

<P><STRONG><a name="[112]"></a>TM_GPIO_Init</STRONG> (Thumb, 48 bytes, Stack size 36 bytes, tm_stm32_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_EnableClock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[113]"></a>TM_GPIO_InitAlternate</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, tm_stm32_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_EnableClock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART1_InitPins
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART2_InitPins
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART3_InitPins
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_UART4_InitPins
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_UART5_InitPins
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART6_InitPins
</UL>

<P><STRONG><a name="[114]"></a>TM_GPIO_DeInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tm_stm32_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_GetPortSource
</UL>

<P><STRONG><a name="[171]"></a>TM_GPIO_SetPinAsInput</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, tm_stm32_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_GPIO_SetPinAsInput
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteBit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadBit
</UL>

<P><STRONG><a name="[170]"></a>TM_GPIO_SetPinAsOutput</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, tm_stm32_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_GPIO_SetPinAsOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteBit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadBit
</UL>

<P><STRONG><a name="[2f6]"></a>TM_GPIO_SetPinAsAnalog</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, tm_stm32_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>TM_GPIO_SetPinAsAlternate</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, tm_stm32_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>TM_GPIO_SetPullResistor</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tm_stm32_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>TM_GPIO_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tm_stm32_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>TM_GPIO_GetPinSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tm_stm32_gpio.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>TM_GPIO_INT_DisableClock</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, tm_stm32_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_GetPortSource
</UL>

<P><STRONG><a name="[116]"></a>TM_GPIO_GetUsedPins</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, tm_stm32_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_GetPortSource
</UL>

<P><STRONG><a name="[117]"></a>TM_GPIO_GetFreePins</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, tm_stm32_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_GetPortSource
</UL>

<P><STRONG><a name="[118]"></a>TM_RCC_InitSystem</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, tm_stm32_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TM_RCC_InitSystem &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>TM_RTC_GetUnixTimeStamp</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, tm_stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TM_RTC_GetUnixTimeStamp
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_GetDateTime
</UL>

<P><STRONG><a name="[11a]"></a>TM_RTC_GetDateTime</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tm_stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TM_RTC_GetDateTime &rArr; TM_RTC_GetUnixTimeStamp
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_GetUnixTimeStamp
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_CHECK
</UL>

<P><STRONG><a name="[11c]"></a>TM_RTC_Init</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, tm_stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TM_RTC_Init &rArr; TM_RTC_Config &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_GetDateTime
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>TM_RTC_SetDateTime</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, tm_stm32_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_SetDateTimeString
</UL>

<P><STRONG><a name="[121]"></a>TM_RTC_SetDateTimeString</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, tm_stm32_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_SetDateTime
</UL>

<P><STRONG><a name="[2fb]"></a>TM_RTC_GetDaysInMonth</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, tm_stm32_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>TM_RTC_GetDaysInYear</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tm_stm32_rtc.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>TM_RTC_Interrupts</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tm_stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TM_RTC_Interrupts &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fd]"></a>TM_RTC_GetDateTimeFromUnix</STRONG> (Thumb, 310 bytes, Stack size 12 bytes, tm_stm32_rtc.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>TM_RTC_EnableAlarm</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, tm_stm32_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[124]"></a>TM_RTC_DisableAlarm</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tm_stm32_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>

<P><STRONG><a name="[2fe]"></a>TM_RTC_WriteBackupRegister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tm_stm32_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>TM_RTC_ReadBackupRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tm_stm32_rtc.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>TM_RTC_AlarmAHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>TM_RTC_AlarmBHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tm_stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; TM_RTC_WakeupHandler &rArr; lowpass_filter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_WakeupHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tm_stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Alarm_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_AlarmBHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_AlarmAHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>TM_USART_InitCustomPinsCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART1_InitPins
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART2_InitPins
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART3_InitPins
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_UART4_InitPins
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_UART5_InitPins
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART6_InitPins
</UL>

<P><STRONG><a name="[128]"></a>TM_USART6_InitPins</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TM_USART6_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_InitCustomPinsCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_InitAlternate
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
</UL>

<P><STRONG><a name="[12a]"></a>TM_UART5_InitPins</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TM_UART5_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_InitCustomPinsCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_InitAlternate
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
</UL>

<P><STRONG><a name="[12b]"></a>TM_UART4_InitPins</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TM_UART4_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_InitCustomPinsCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_InitAlternate
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
</UL>

<P><STRONG><a name="[12c]"></a>TM_USART3_InitPins</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TM_USART3_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_InitCustomPinsCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_InitAlternate
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
</UL>

<P><STRONG><a name="[12d]"></a>TM_USART2_InitPins</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TM_USART2_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_InitCustomPinsCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_InitAlternate
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
</UL>

<P><STRONG><a name="[12e]"></a>TM_USART1_InitPins</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_InitCustomPinsCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_InitAlternate
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
</UL>

<P><STRONG><a name="[132]"></a>TM_USART_Init</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[133]"></a>TM_USART_InitWithFlowControl</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, tm_stm32_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
</UL>

<P><STRONG><a name="[134]"></a>TM_USART_Getc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_GetUSARTBuffer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_Read
</UL>

<P><STRONG><a name="[136]"></a>TM_USART_Gets</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TM_USART_Gets &rArr; TM_BUFFER_ReadString &rArr; TM_BUFFER_FindElement &rArr; TM_BUFFER_GetFull
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_GetUSARTBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_ReadString
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_WakeupHandler
</UL>

<P><STRONG><a name="[181]"></a>TM_USART_Puts</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_WakeupHandler
</UL>

<P><STRONG><a name="[1f4]"></a>TM_USART_Send</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_USART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[137]"></a>TM_USART_FindCharacter</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_GetUSARTBuffer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_FindElement
</UL>

<P><STRONG><a name="[138]"></a>TM_USART_FindString</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tm_stm32_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_GetUSARTBuffer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_Find
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[139]"></a>TM_USART_BufferEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_GetUSARTBuffer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_GetFull
</UL>

<P><STRONG><a name="[13a]"></a>TM_USART_BufferFull</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_GetUSARTBuffer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_GetFree
</UL>

<P><STRONG><a name="[13b]"></a>TM_USART_BufferCount</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_GetUSARTBuffer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_GetFull
</UL>

<P><STRONG><a name="[13c]"></a>TM_USART_ClearBuffer</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_GetUSARTBuffer
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_Reset
</UL>

<P><STRONG><a name="[13e]"></a>TM_USART_SetCustomStringEndCharacter</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_GetUSARTBuffer
</UL>

<P><STRONG><a name="[300]"></a>TM_USART2_ReceiveHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_usart.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>TM_USART3_ReceiveHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_usart.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>TM_UART4_ReceiveHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_usart.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>TM_UART5_ReceiveHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_usart.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>TM_USART6_ReceiveHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_usart.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>TM_UART7_ReceiveHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_usart.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>TM_UART8_ReceiveHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm_stm32_usart.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART1_IRQHandler &rArr; TM_USART1_ReceiveHandler &rArr; GSM_DataReceived &rArr; BUFFER_Write &rArr; BUFFER_GetFree
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_ClearAllFlags
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART1_ReceiveHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; TM_USART_INT_InsertToBuffer &rArr; TM_BUFFER_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_ClearAllFlags
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_InsertToBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; TM_USART_INT_InsertToBuffer &rArr; TM_BUFFER_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_ClearAllFlags
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_InsertToBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART4_IRQHandler &rArr; TM_USART_INT_InsertToBuffer &rArr; TM_BUFFER_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_ClearAllFlags
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_InsertToBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART5_IRQHandler &rArr; TM_USART_INT_InsertToBuffer &rArr; TM_BUFFER_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_ClearAllFlags
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_InsertToBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART6_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART6_IRQHandler &rArr; TM_USART_INT_InsertToBuffer &rArr; TM_BUFFER_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_ClearAllFlags
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_InsertToBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>TM_ADC_InitADC</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TM_ADC_InitADC &rArr; HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[154]"></a>TM_ADC_Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TM_ADC_Init &rArr; TM_ADC_INT_Channel_0_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_InitADC
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_0_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_1_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_2_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_3_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_4_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_5_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_6_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_7_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_8_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_9_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_10_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_11_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_12_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_13_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_14_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_15_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>TM_ADC_Read</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TM_ADC_Read &rArr; HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetState
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_WakeupHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_ReadVbat
</UL>

<P><STRONG><a name="[307]"></a>TM_ADC_EnableVbat</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tm_stm32_adc.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>TM_ADC_DisableVbat</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tm_stm32_adc.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>TM_ADC_ReadVbat</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tm_stm32_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Read
</UL>

<P><STRONG><a name="[15c]"></a>TM_DS18B20_Is</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tm_stm32_ds18b20.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_DisableAlarmTemperature
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetAlarmHighTemperature
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetAlarmLowTemperature
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetResolution
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_GetResolution
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Read
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Start
</UL>

<P><STRONG><a name="[15b]"></a>TM_DS18B20_Start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tm_stm32_ds18b20.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_SelectWithPointer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Is
</UL>

<P><STRONG><a name="[160]"></a>TM_DS18B20_StartAll</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tm_stm32_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TM_DS18B20_StartAll &rArr; TM_OneWire_WriteByte &rArr; TM_OneWire_WriteBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_WakeupHandler
</UL>

<P><STRONG><a name="[161]"></a>TM_DS18B20_Read</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, tm_stm32_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TM_DS18B20_Read &rArr; TM_OneWire_SelectWithPointer &rArr; TM_OneWire_WriteByte &rArr; TM_OneWire_WriteBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_SelectWithPointer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadByte
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadBit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_CRC8
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Is
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_WakeupHandler
</UL>

<P><STRONG><a name="[165]"></a>TM_DS18B20_GetResolution</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tm_stm32_ds18b20.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_SelectWithPointer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadByte
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Is
</UL>

<P><STRONG><a name="[166]"></a>TM_DS18B20_SetResolution</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, tm_stm32_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TM_DS18B20_SetResolution &rArr; TM_OneWire_SelectWithPointer &rArr; TM_OneWire_WriteByte &rArr; TM_OneWire_WriteBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_SelectWithPointer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadByte
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Is
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>TM_DS18B20_SetAlarmLowTemperature</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, tm_stm32_ds18b20.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_SelectWithPointer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadByte
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Is
</UL>

<P><STRONG><a name="[168]"></a>TM_DS18B20_SetAlarmHighTemperature</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, tm_stm32_ds18b20.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_SelectWithPointer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadByte
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Is
</UL>

<P><STRONG><a name="[169]"></a>TM_DS18B20_DisableAlarmTemperature</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tm_stm32_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TM_DS18B20_DisableAlarmTemperature &rArr; TM_OneWire_SelectWithPointer &rArr; TM_OneWire_WriteByte &rArr; TM_OneWire_WriteBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_SelectWithPointer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadByte
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Is
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>TM_DS18B20_AlarmSearch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm_stm32_ds18b20.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Search
</UL>

<P><STRONG><a name="[16c]"></a>TM_DS18B20_AllDone</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm_stm32_ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TM_DS18B20_AllDone &rArr; TM_OneWire_ReadBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_WakeupHandler
</UL>

<P><STRONG><a name="[16e]"></a>TM_OneWire_Init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TM_OneWire_Init &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DELAY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>TM_OneWire_Reset</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TM_OneWire_Reset &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_SetPinAsOutput
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_SetPinAsInput
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Search
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_DisableAlarmTemperature
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetAlarmHighTemperature
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetAlarmLowTemperature
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetResolution
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_GetResolution
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_StartAll
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Start
</UL>

<P><STRONG><a name="[172]"></a>TM_OneWire_WriteBit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TM_OneWire_WriteBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_SetPinAsOutput
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_SetPinAsInput
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Search
</UL>

<P><STRONG><a name="[162]"></a>TM_OneWire_ReadBit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TM_OneWire_ReadBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_SetPinAsOutput
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_SetPinAsInput
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Search
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadByte
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_AllDone
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Read
</UL>

<P><STRONG><a name="[15f]"></a>TM_OneWire_WriteByte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM_OneWire_WriteByte &rArr; TM_OneWire_WriteBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Select
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_SelectWithPointer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Search
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_DisableAlarmTemperature
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetAlarmHighTemperature
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetAlarmLowTemperature
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetResolution
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_GetResolution
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_StartAll
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Start
</UL>

<P><STRONG><a name="[163]"></a>TM_OneWire_ReadByte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM_OneWire_ReadByte &rArr; TM_OneWire_ReadBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_DisableAlarmTemperature
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetAlarmHighTemperature
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetAlarmLowTemperature
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetResolution
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_GetResolution
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Read
</UL>

<P><STRONG><a name="[16b]"></a>TM_OneWire_Search</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TM_OneWire_Search &rArr; TM_OneWire_WriteByte &rArr; TM_OneWire_WriteBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteBit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Verify
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Next
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_First
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_AlarmSearch
</UL>

<P><STRONG><a name="[174]"></a>TM_OneWire_ResetSearch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_First
</UL>

<P><STRONG><a name="[173]"></a>TM_OneWire_First</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TM_OneWire_First &rArr; TM_OneWire_Search &rArr; TM_OneWire_WriteByte &rArr; TM_OneWire_WriteBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ResetSearch
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Search
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>TM_OneWire_Next</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm_stm32_onewire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Search
</UL>

<P><STRONG><a name="[176]"></a>TM_OneWire_Verify</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, tm_stm32_onewire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Search
</UL>

<P><STRONG><a name="[309]"></a>TM_OneWire_TargetSetup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tm_stm32_onewire.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>TM_OneWire_FamilySkipSetup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tm_stm32_onewire.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>TM_OneWire_GetROM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tm_stm32_onewire.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>TM_OneWire_Select</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tm_stm32_onewire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
</UL>

<P><STRONG><a name="[15e]"></a>TM_OneWire_SelectWithPointer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TM_OneWire_SelectWithPointer &rArr; TM_OneWire_WriteByte &rArr; TM_OneWire_WriteBit &rArr; Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_DisableAlarmTemperature
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetAlarmHighTemperature
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetAlarmLowTemperature
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetResolution
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_GetResolution
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Read
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Start
</UL>

<P><STRONG><a name="[178]"></a>TM_OneWire_GetFullROM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>TM_OneWire_CRC8</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TM_OneWire_CRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Read
</UL>

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = main &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Interrupts
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RCC_InitSystem
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DELAY_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_GetFullROM
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_First
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_DisableAlarmTemperature
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_SetResolution
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[17b]"></a>lowpass_filter</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lowpass_filter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_WakeupHandler
</UL>

<P><STRONG><a name="[125]"></a>TM_RTC_WakeupHandler</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TM_RTC_WakeupHandler &rArr; lowpass_filter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_Puts
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_Gets
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpass_filter
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_AllDone
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_Read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DS18B20_StartAll
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>TM_DELAY_1msHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TM_DELAY_1msHandler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UpdateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>

<P><STRONG><a name="[6f]"></a>GSM_Update_Thread</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = GSM_Update_Thread &rArr; GSM_Update &rArr; ParseReceived &rArr; ParseCIPGSMLOC &rArr; ParseFloatNumber &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>GSM_SMS_CHECK</STRONG> (Thumb, 3756 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GSM_SMS_CHECK &rArr; GSM_SMS_Send &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_GetDateTime
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_MassDelete
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Thread
</UL>

<P><STRONG><a name="[71]"></a>GSM_SMS_Thread</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + In Cycle
<LI>Call Chain = GSM_SMS_Thread &rArr;  GSM_SMS_Thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_MassDelete
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_GetReceivedInfo
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_ClearReceivedInfo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ProcessCallbacks
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Thread
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_CHECK
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>SEND_STATUS</STRONG> (Thumb, 3442 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = SEND_STATUS &rArr; GSM_HTTP_Read &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_SetData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_SetContent
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Read
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Execute
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_End
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_DataAvailable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Begin
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
</UL>

<P><STRONG><a name="[197]"></a>GSM_Callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GSM_Callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>GSM_Main_Thread</STRONG> (Thumb, 988 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = GSM_Main_Thread &rArr; GSM_Init &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_GetDateTime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ProcessCallbacks
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_SetData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_SetContent
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Read
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Execute
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_End
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_DataAvailable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Begin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Detach
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Attach
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_STATUS
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>fputc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[19b]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32fxxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32fxxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32fxxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32fxxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30c]"></a>TimingDelay_Decrement</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32fxxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; HAL_IncTick &rArr; TM_DELAY_1msHandler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[30d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>mem_mem</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[1a2]"></a>ParseDATE</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ParseDATE &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMGR
</UL>

<P><STRONG><a name="[1a3]"></a>ParseTIME</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ParseTIME &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMGR
</UL>

<P><STRONG><a name="[1c6]"></a>ProcessThreads</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ProcessThreads &rArr; PT_Thread_GPRS &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_OP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GPRS
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_DATETIME
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_SMS
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PIN
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_INFO
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GEN
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update
</UL>

<P><STRONG><a name="[1c9]"></a>GSM_WaitReady</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetRevision
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetModel
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetManufacturer
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_FUNC_Get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_FUNC_Set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_MassDelete
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_SetData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_SetContent
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Read
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Execute
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_End
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Begin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Detach
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Attach
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_CONN_Close
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_CONN_Receive
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_CONN_Send
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_CONN_Start
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_GetLocationAndTime
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DATETIME_Get
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_Search
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_List
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_Get
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_Delete
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_Edit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_Add
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Delete
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_List
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PUK_Enter
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PIN_Add
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PIN_Remove
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PIN_Enter
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OP_Set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OP_Get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OP_Scan
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetSignalStrength
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetBatteryInfo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetSoftwareInfo
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetSerialNumber
</UL>

<P><STRONG><a name="[1c8]"></a>GSM_Delay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GSM_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Init
</UL>

<P><STRONG><a name="[198]"></a>GSM_Init</STRONG> (Thumb, 1220 bytes, Stack size 40 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GSM_Init &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Delay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESET_THREADS
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
</UL>

<P><STRONG><a name="[30e]"></a>GSM_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gsm.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>GSM_Update</STRONG> (Thumb, 896 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = GSM_Update &rArr; ParseReceived &rArr; ParseCIPGSMLOC &rArr; ParseFloatNumber &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessThreads
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCOPSSCAN
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update_Thread
</UL>

<P><STRONG><a name="[182]"></a>GSM_UpdateTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DELAY_1msHandler
</UL>

<P><STRONG><a name="[189]"></a>GSM_ProcessCallbacks</STRONG> (Thumb, 434 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GSM_ProcessCallbacks
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Thread
</UL>

<P><STRONG><a name="[30f]"></a>GSM_GetLastReturnStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gsm.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>GSM_DataReceived</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GSM_DataReceived &rArr; BUFFER_Write &rArr; BUFFER_GetFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART1_ReceiveHandler
</UL>

<P><STRONG><a name="[1cd]"></a>GSM_FUNC_Set</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1ce]"></a>GSM_FUNC_Get</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1cf]"></a>GSM_INFO_GetManufacturer</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1d0]"></a>GSM_INFO_GetModel</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1d1]"></a>GSM_INFO_GetRevision</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1d2]"></a>GSM_INFO_GetSerialNumber</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1d3]"></a>GSM_INFO_GetSoftwareInfo</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1d4]"></a>GSM_INFO_GetBatteryInfo</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1d5]"></a>GSM_INFO_GetSignalStrength</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1d6]"></a>GSM_OP_Scan</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1d7]"></a>GSM_OP_Get</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1d8]"></a>GSM_OP_Set</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1d9]"></a>GSM_PIN_Enter</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1da]"></a>GSM_PIN_Remove</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1db]"></a>GSM_PIN_Add</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1dc]"></a>GSM_PUK_Enter</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[187]"></a>GSM_SMS_Send</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GSM_SMS_Send &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_CHECK
</UL>

<P><STRONG><a name="[18a]"></a>GSM_SMS_Read</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GSM_SMS_Read &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Thread
</UL>

<P><STRONG><a name="[1dd]"></a>GSM_SMS_List</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1de]"></a>GSM_SMS_Delete</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[188]"></a>GSM_SMS_MassDelete</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GSM_SMS_MassDelete &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Thread
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_CHECK
</UL>

<P><STRONG><a name="[18d]"></a>GSM_SMS_GetReceivedInfo</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GSM_SMS_GetReceivedInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Thread
</UL>

<P><STRONG><a name="[18c]"></a>GSM_SMS_ClearReceivedInfo</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Thread
</UL>

<P><STRONG><a name="[1df]"></a>GSM_PB_Add</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1e0]"></a>GSM_PB_Edit</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1e1]"></a>GSM_PB_Delete</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1e2]"></a>GSM_PB_Get</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1e3]"></a>GSM_PB_List</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1e4]"></a>GSM_PB_Search</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1e5]"></a>GSM_DATETIME_Get</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[199]"></a>GSM_GPRS_Attach</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GSM_GPRS_Attach &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
</UL>

<P><STRONG><a name="[19a]"></a>GSM_GPRS_Detach</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = GSM_GPRS_Detach &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
</UL>

<P><STRONG><a name="[1e6]"></a>GSM_GPRS_GetLocationAndTime</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1e7]"></a>GSM_CONN_Start</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1e8]"></a>GSM_CONN_Send</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1e9]"></a>GSM_CONN_Receive</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1ea]"></a>GSM_CONN_Close</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[310]"></a>GSM_CONN_DataAvailable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gsm.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>GSM_HTTP_Begin</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = GSM_HTTP_Begin &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_STATUS
</UL>

<P><STRONG><a name="[196]"></a>GSM_HTTP_End</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = GSM_HTTP_End &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_STATUS
</UL>

<P><STRONG><a name="[190]"></a>GSM_HTTP_SetData</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GSM_HTTP_SetData &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_STATUS
</UL>

<P><STRONG><a name="[191]"></a>GSM_HTTP_SetContent</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GSM_HTTP_SetContent &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_STATUS
</UL>

<P><STRONG><a name="[192]"></a>GSM_HTTP_Execute</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GSM_HTTP_Execute &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_STATUS
</UL>

<P><STRONG><a name="[193]"></a>GSM_HTTP_Read</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GSM_HTTP_Read &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_WaitReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_STATUS
</UL>

<P><STRONG><a name="[195]"></a>GSM_HTTP_DataAvailable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_STATUS
</UL>

<P><STRONG><a name="[1c7]"></a>BUFFER_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BUFFER_Init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Init
</UL>

<P><STRONG><a name="[1eb]"></a>BUFFER_Free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[1ec]"></a>BUFFER_GetFree</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUFFER_GetFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_ReadString
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_WriteToTop
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Write
</UL>

<P><STRONG><a name="[1cc]"></a>BUFFER_Write</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BUFFER_Write &rArr; BUFFER_GetFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_GetFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DataReceived
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_WriteString
</UL>

<P><STRONG><a name="[1ee]"></a>BUFFER_WriteToTop</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_GetFree
</UL>

<P><STRONG><a name="[1ef]"></a>BUFFER_GetFull</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUFFER_GetFull
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_ReadString
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Find
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_FindElement
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Read
</UL>

<P><STRONG><a name="[1ca]"></a>BUFFER_Read</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BUFFER_Read &rArr; BUFFER_GetFull
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_GetFull
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_ReadString
</UL>

<P><STRONG><a name="[311]"></a>BUFFER_GetFullFast</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, buffer.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>BUFFER_Reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, buffer.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>BUFFER_FindElement</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_GetFull
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_ReadString
</UL>

<P><STRONG><a name="[1f1]"></a>BUFFER_Find</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_GetFull
</UL>

<P><STRONG><a name="[1f2]"></a>BUFFER_WriteString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Write
</UL>

<P><STRONG><a name="[1f3]"></a>BUFFER_ReadString</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, buffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_FindElement
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_GetFull
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_GetFree
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Read
</UL>

<P><STRONG><a name="[313]"></a>BUFFER_CheckElement</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, buffer.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>GSM_LL_Callback</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, gsm_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_Send
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetRevision
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetModel
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetManufacturer
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_FUNC_Get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_FUNC_Set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_OP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GPRS
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_DATETIME
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_SMS
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PIN
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_INFO
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GEN
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_MassDelete
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_SetData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_SetContent
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Read
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Execute
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_End
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Begin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Detach
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Attach
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_CONN_Close
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_CONN_Receive
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_CONN_Send
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_CONN_Start
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_GetLocationAndTime
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DATETIME_Get
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_Search
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_List
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_Get
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_Delete
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_Edit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PB_Add
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Delete
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_List
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PUK_Enter
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PIN_Add
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PIN_Remove
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PIN_Enter
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OP_Set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OP_Get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OP_Scan
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetSignalStrength
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetBatteryInfo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetSoftwareInfo
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_INFO_GetSerialNumber
</UL>

<P><STRONG><a name="[141]"></a>TM_USART1_ReceiveHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gsm_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TM_USART1_ReceiveHandler &rArr; GSM_DataReceived &rArr; BUFFER_Write &rArr; BUFFER_GetFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DataReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1fc]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[221]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[226]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[22c]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[228]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[1f9]"></a>xQueueGenericReset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1fe]"></a>xQueueGenericCreate</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[205]"></a>xQueueGenericSend</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[20b]"></a>xQueueCreateMutex</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRecursiveMutexCreate
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[20c]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRecursiveMutexRelease
</UL>

<P><STRONG><a name="[210]"></a>xQueueGenericReceive</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePeek
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[213]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRecursiveMutexWait
</UL>

<P><STRONG><a name="[214]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[215]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[217]"></a>xQueueGiveFromISR</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[218]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[219]"></a>xQueuePeekFromISR</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[21a]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[21b]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[314]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[21c]"></a>vQueueDelete</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[315]"></a>uxQueueGetQueueNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>vQueueSetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>ucQueueGetQueueType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>xTaskGenericCreate</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[227]"></a>vTaskDelete</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[22a]"></a>xTaskIncrementTick</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[20a]"></a>xTaskResumeAll</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResumeAll
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[207]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspendAll
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[22d]"></a>vTaskDelay</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[22e]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[22f]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[230]"></a>vTaskPrioritySet</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[74]"></a>vTaskSwitchContext</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[231]"></a>vTaskSuspend</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[232]"></a>vTaskResume</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[234]"></a>xTaskResumeFromISR</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[237]"></a>vTaskStartScheduler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[239]"></a>vTaskEndScheduler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[24f]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[23b]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[31b]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>uxTaskGetSystemState</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[209]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[23f]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[1fb]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[240]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[206]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[208]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[201]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[31c]"></a>uxTaskGetTaskNumber</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>vTaskSetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[24c]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
</UL>

<P><STRONG><a name="[212]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[204]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[31e]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[241]"></a>ulTaskNotifyTake</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[242]"></a>xTaskNotifyWait</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>

<P><STRONG><a name="[243]"></a>xTaskGenericNotify</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[244]"></a>xTaskNotifyFromISR</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[245]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[225]"></a>pxPortInitialiseStack</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port_cm4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[246]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port_cm4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[238]"></a>xPortStartScheduler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, port_cm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_port_cm4_c_39a90d8d__prvEnableVFP
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_port_cm4_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[23a]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_cm4.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[1fa]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port_cm4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1fd]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port_cm4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[249]"></a>xPortSysTickHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port_cm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[216]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, port_cm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[17a]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24b]"></a>osKernelRunning</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>

<P><STRONG><a name="[24d]"></a>osKernelSysTick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>

<P><STRONG><a name="[179]"></a>osThreadCreate</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[251]"></a>osThreadGetId</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>

<P><STRONG><a name="[252]"></a>osThreadTerminate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[31f]"></a>osThreadYield</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>osThreadSetPriority</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
</UL>

<P><STRONG><a name="[254]"></a>osThreadGetPriority</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeCmsisPriority
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
</UL>

<P><STRONG><a name="[256]"></a>osDelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[320]"></a>osTimerCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>osTimerStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>osTimerStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>osTimerDelete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>osSignalSet</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>

<P><STRONG><a name="[258]"></a>osSignalWait</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
</UL>

<P><STRONG><a name="[1f5]"></a>osMutexCreate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1f7]"></a>osMutexWait</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1f8]"></a>osMutexRelease</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[1f6]"></a>osMutexDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>

<P><STRONG><a name="[259]"></a>osSemaphoreCreate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[25a]"></a>osSemaphoreWait</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[25b]"></a>osSemaphoreRelease</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[25c]"></a>osSemaphoreDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[25d]"></a>osPoolCreate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
</UL>

<P><STRONG><a name="[25e]"></a>osPoolAlloc</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailAlloc
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCAlloc
</UL>

<P><STRONG><a name="[25f]"></a>osPoolCAlloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>

<P><STRONG><a name="[269]"></a>osPoolFree</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailFree
</UL>

<P><STRONG><a name="[260]"></a>osMessageCreate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[261]"></a>osMessagePut</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[262]"></a>osMessageGet</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[263]"></a>osMailCreate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[264]"></a>osMailAlloc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCAlloc
</UL>

<P><STRONG><a name="[265]"></a>osMailCAlloc</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailAlloc
</UL>

<P><STRONG><a name="[266]"></a>osMailPut</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[267]"></a>osMailGet</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[268]"></a>osMailFree</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
</UL>

<P><STRONG><a name="[183]"></a>osSystickHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DELAY_1msHandler
</UL>

<P><STRONG><a name="[26a]"></a>osThreadSuspend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[26b]"></a>osThreadResume</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[26c]"></a>osThreadSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[26d]"></a>osThreadResumeAll</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[324]"></a>osDelayUntil</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>osThreadList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>osMessagePeek</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[26f]"></a>osRecursiveMutexCreate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[270]"></a>osRecursiveMutexRelease</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[271]"></a>osRecursiveMutexWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[1ff]"></a>pvPortMalloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[21e]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[326]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Write
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Read
</UL>

<P><STRONG><a name="[329]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[32b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCOPSSCAN
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_OP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GPRS
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_DATETIME
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_SMS
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PIN
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_INFO
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GEN
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HTTP_Begin
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Init
</UL>

<P><STRONG><a name="[32d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b8]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[f6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_FindString
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_WriteString
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_OP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GPRS
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_SMS
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PIN
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GEN
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMGR
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Send
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Attach
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_WriteString
</UL>

<P><STRONG><a name="[186]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCPIN
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_CHECK
</UL>

<P><STRONG><a name="[19d]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_mem
</UL>

<P><STRONG><a name="[1a6]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMGR
</UL>

<P><STRONG><a name="[1a9]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMTI
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update
</UL>

<P><STRONG><a name="[1a5]"></a>strtok_r</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, strtok_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMGR
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtok$wrapper
</UL>

<P><STRONG><a name="[275]"></a>_strtok$wrapper</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtok_r.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpass_filter
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[27b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpass_filter
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpass_filter
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFloatNumber
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpass_filter
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFloatNumber
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpass_filter
</UL>

<P><STRONG><a name="[32e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[276]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[32f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[330]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[332]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[278]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[290]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[333]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[28f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[73]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[334]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[335]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[336]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[338]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[18b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Callback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS_Thread
</UL>

<P><STRONG><a name="[339]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[194]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Main_Thread
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_STATUS
</UL>

<P><STRONG><a name="[285]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[33a]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ba]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberToString
</UL>

<P><STRONG><a name="[33b]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[33c]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[291]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a1]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFloatNumber
</UL>

<P><STRONG><a name="[28e]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[288]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[286]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[28c]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[289]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[28d]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[33d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[33e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[33f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[287]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[28b]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[f1]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DELAY_TimerDelete
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_Free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Free
</UL>

<P><STRONG><a name="[ef]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DELAY_TimerCreate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_Init
</UL>

<P><STRONG><a name="[28a]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[83]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[82]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetPriorityGrouping
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[88]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[8b]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[9b]"></a>UART_SetConfig</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a3]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[61]"></a>UART_DMAError</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>UART_Transmit_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>UART_Receive_IT</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>ADC_Init</STRONG> (Thumb, 362 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[66]"></a>ADC_DMAError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>ADC_MultiModeDMAError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_MultiModeDMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc_ex.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>ADC_MultiModeDMAHalfConvCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_MultiModeDMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc_ex.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>ADC_MultiModeDMAConvCplt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_MultiModeDMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc_ex.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>TM_DMA_INT_ProcessInterrupt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tm_stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM_DMA_INT_ProcessInterrupt &rArr; TM_DMA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_FIFOErrorHandler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_DirectModeErrorHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_TransferErrorHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_HalfTransferCompleteHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_TransferCompleteHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_GetFlags
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>TM_RTC_Config</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, tm_stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_RTC_Config &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RTC_Init
</UL>

<P><STRONG><a name="[130]"></a>TM_USART_INT_GetSubPriority</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_Init
</UL>

<P><STRONG><a name="[12f]"></a>TM_USART_INT_Init</STRONG> (Thumb, 590 bytes, Stack size 104 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART1_InitPins
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART2_InitPins
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART3_InitPins
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_UART4_InitPins
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_UART5_InitPins
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART6_InitPins
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_INT_GetSubPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_InitWithFlowControl
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_Init
</UL>

<P><STRONG><a name="[135]"></a>TM_USART_INT_GetUSARTBuffer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_SetCustomStringEndCharacter
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_ClearBuffer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_BufferCount
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_BufferFull
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_BufferEmpty
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_FindString
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_FindCharacter
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_Gets
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_USART_Getc
</UL>

<P><STRONG><a name="[13f]"></a>TM_USART_INT_InsertToBuffer</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM_USART_INT_InsertToBuffer &rArr; TM_BUFFER_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_BUFFER_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>TM_USART_INT_ClearAllFlags</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tm_stm32_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_USART_INT_ClearAllFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>TM_ADC_INT_InitPin</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_0_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_1_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_2_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_3_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_4_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_5_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_6_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_7_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_8_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_9_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_10_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_11_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_12_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_13_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_14_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_15_Init
</UL>

<P><STRONG><a name="[144]"></a>TM_ADC_INT_Channel_15_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_15_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[145]"></a>TM_ADC_INT_Channel_14_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_14_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[146]"></a>TM_ADC_INT_Channel_13_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_13_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[147]"></a>TM_ADC_INT_Channel_12_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_12_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[148]"></a>TM_ADC_INT_Channel_11_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_11_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[149]"></a>TM_ADC_INT_Channel_10_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_10_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[14a]"></a>TM_ADC_INT_Channel_9_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_9_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[14b]"></a>TM_ADC_INT_Channel_8_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_8_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[14c]"></a>TM_ADC_INT_Channel_7_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_7_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[14d]"></a>TM_ADC_INT_Channel_6_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_6_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[14e]"></a>TM_ADC_INT_Channel_5_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_5_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[14f]"></a>TM_ADC_INT_Channel_4_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_4_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[150]"></a>TM_ADC_INT_Channel_3_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_3_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[151]"></a>TM_ADC_INT_Channel_2_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_2_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[152]"></a>TM_ADC_INT_Channel_1_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_1_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[153]"></a>TM_ADC_INT_Channel_0_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm_stm32_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM_ADC_INT_Channel_0_Init &rArr; TM_ADC_INT_InitPin &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[16d]"></a>Delay</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tm_stm32_onewire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Delay &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_WriteBit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_Reset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OneWire_ReadBit
</UL>

<P><STRONG><a name="[1be]"></a>__RESET_THREADS</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_OP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GPRS
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_DATETIME
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_SMS
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PIN
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_INFO
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GEN
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Init
</UL>

<P><STRONG><a name="[6a]"></a>GSM_CallbackDefault</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gsm.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>ParseNumber</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseTIME
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseDATE
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCOPSRead
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCSQ
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCBC
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCIPGSMLOC
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseHTTPACTION
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCIPRXGET
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCREG
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseIP
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCPBR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCFUN
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMTI
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMGL
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFloatNumber
</UL>

<P><STRONG><a name="[19e]"></a>ParseFloatNumber</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ParseFloatNumber &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCIPGSMLOC
</UL>

<P><STRONG><a name="[1a4]"></a>ParseCMGR</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ParseCMGR &rArr; ParseTIME &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseTIME
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseDATE
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMGL
</UL>

<P><STRONG><a name="[1a7]"></a>ParseCMGL</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ParseCMGL &rArr; ParseCMGR &rArr; ParseTIME &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMGR
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1a8]"></a>ParseCMTI</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ParseCMTI &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1aa]"></a>ParseCPIN</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ParseCPIN &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1ab]"></a>ParseCFUN</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ParseCFUN &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1ac]"></a>ParseCPBR</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ParseCPBR &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1ad]"></a>ParseIP</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ParseIP &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1ae]"></a>ParseCREG</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ParseCREG &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1af]"></a>ParseCIPRXGET</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ParseCIPRXGET &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1b0]"></a>ParseHTTPACTION</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ParseHTTPACTION &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1b1]"></a>ParseCIPGSMLOC</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ParseCIPGSMLOC &rArr; ParseFloatNumber &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFloatNumber
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1b2]"></a>ParseCBC</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ParseCBC &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1b3]"></a>ParseCSQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ParseCSQ &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1b4]"></a>ParseCOPSSCAN</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ParseCOPSSCAN
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update
</UL>

<P><STRONG><a name="[1b6]"></a>ParseCOPSRead</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ParseCOPSRead &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseReceived
</UL>

<P><STRONG><a name="[1b7]"></a>ParseReceived</STRONG> (Thumb, 2366 bytes, Stack size 40 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ParseReceived &rArr; ParseCIPGSMLOC &rArr; ParseFloatNumber &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCOPSRead
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCSQ
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCBC
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCIPGSMLOC
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseHTTPACTION
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCIPRXGET
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCREG
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseIP
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCPBR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCFUN
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCPIN
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMTI
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMGL
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCMGR
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update
</UL>

<P><STRONG><a name="[1bd]"></a>StartCommand</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_OP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GPRS
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_DATETIME
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_SMS
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PIN
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_INFO
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GEN
</UL>

<P><STRONG><a name="[1b9]"></a>NumberToString</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NumberToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_OP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GPRS
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_PB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_SMS
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_Thread_GEN
</UL>

<P><STRONG><a name="[1bb]"></a>PT_Thread_GEN</STRONG> (Thumb, 2070 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = PT_Thread_GEN &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberToString
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESET_THREADS
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessThreads
</UL>

<P><STRONG><a name="[1bf]"></a>PT_Thread_INFO</STRONG> (Thumb, 1428 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = PT_Thread_INFO &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESET_THREADS
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessThreads
</UL>

<P><STRONG><a name="[1c0]"></a>PT_Thread_PIN</STRONG> (Thumb, 1726 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = PT_Thread_PIN &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESET_THREADS
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessThreads
</UL>

<P><STRONG><a name="[1c1]"></a>PT_Thread_SMS</STRONG> (Thumb, 1914 bytes, Stack size 32 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = PT_Thread_SMS &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberToString
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESET_THREADS
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessThreads
</UL>

<P><STRONG><a name="[1c2]"></a>PT_Thread_PB</STRONG> (Thumb, 2066 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = PT_Thread_PB &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberToString
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESET_THREADS
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessThreads
</UL>

<P><STRONG><a name="[1c3]"></a>PT_Thread_DATETIME</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = PT_Thread_DATETIME &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESET_THREADS
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessThreads
</UL>

<P><STRONG><a name="[1c4]"></a>PT_Thread_GPRS</STRONG> (Thumb, 7480 bytes, Stack size 32 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = PT_Thread_GPRS &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberToString
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESET_THREADS
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessThreads
</UL>

<P><STRONG><a name="[1c5]"></a>PT_Thread_OP</STRONG> (Thumb, 892 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = PT_Thread_OP &rArr; GSM_LL_Callback &rArr; TM_USART_Init &rArr; TM_USART_INT_Init &rArr; TM_USART1_InitPins &rArr; TM_GPIO_InitAlternate &rArr; TM_GPIO_INT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberToString
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESET_THREADS
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LL_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessThreads
</UL>

<P><STRONG><a name="[200]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[202]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[203]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[20e]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[20f]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[21f]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[220]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[222]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[229]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[22b]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[233]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[235]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[236]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[6b]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[23d]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
</UL>

<P><STRONG><a name="[23c]"></a>prvListTaskWithinSingleList</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[6c]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port_cm4.o(.text)
</UL>
<P><STRONG><a name="[250]"></a>makeFreeRtosPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[255]"></a>makeCmsisPriority</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[24e]"></a>inHandlerMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[273]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[272]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[292]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[284]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[294]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[293]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
